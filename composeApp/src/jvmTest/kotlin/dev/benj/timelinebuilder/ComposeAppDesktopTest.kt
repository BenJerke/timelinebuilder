package dev.benj.timelinebuilder

import androidx.lifecycle.viewModelScope
import dev.benj.timelinebuilder.db.TestDatabaseDriverFactory
import dev.benj.timelinebuilder.tlevent.SqliteTLEventRepository
import dev.benj.timelinebuilder.tlevent.TLEvent
import dev.benj.timelinebuilder.tlevent.TLEventViewModel
import kotlinx.coroutines.awaitCancellation
import kotlinx.coroutines.launch
import kotlinx.datetime.LocalDateTime
import kotlin.test.BeforeTest
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import kotlin.test.fail

class ComposeAppDesktopTest {
    private lateinit var driverFactory: TestDatabaseDriverFactory
    private lateinit var repository: SqliteTLEventRepository
    private lateinit var viewModel: TLEventViewModel

    @BeforeTest
    fun setup() {
        this.driverFactory = TestDatabaseDriverFactory()
        this.repository = SqliteTLEventRepository(driverFactory)
        this.viewModel = TLEventViewModel(repository)
    }

    @Test
    fun `When an event is added, it should be saved to the database and reflected in the viewmodel state`() {

        val testEvent = TLEvent(
            id = 0, // ID should be auto-generated by database
            title = "Test Event",
            description = "This is a test event",
            startDateTime = LocalDateTime.parse("2024-01-15T10:00:00"),
            endDateTime = LocalDateTime.parse("2024-01-15T12:00:00")
        )

        val pendingAddition = viewModel.addEvent(testEvent)


        val allEvents = repository.getAllEvents()
        assertEquals(8, allEvents.size, "Expected exactly one new event in the database")
        val savedEvent = viewModel.eventList.value.find { event -> event.title == "Test Event" }
        if(savedEvent != null ){
            assertEquals(testEvent.title, savedEvent?.title, "Event title should match")
            assertEquals(testEvent.description, savedEvent?.description, "Event description should match")
            assertEquals(testEvent.startDateTime, savedEvent?.startDateTime, "Event start date/time should match")
            assertEquals(testEvent.endDateTime, savedEvent.endDateTime, "Event end date/time should match")
            assertTrue(savedEvent.id > 0, "Event ID should be auto-generated and greater than 0")
        } else {
            fail("Saved event not found in the database")
        }
    }

    @Test
    fun `When an event is added, it should be displayed on the UI`(){

    }

    @Test
    fun `When an event is edited, the changes should be saved to the database`(){

    }

    @Test
    fun `When an event is edited, the changes should be reflected on the UI`(){}

    @Test
    fun `When an event is deleted, it should be removed from the database`(){}

    @Test
    fun `When an event is deleted, it should no longer be displayed on the UI`(){}

    @Test
    fun `When an event is linked to another event, the relationship should be saved to the database`(){}

    @Test
    fun `When an event is linked to another event, the relationship should be reflected on the UI`(){}
}